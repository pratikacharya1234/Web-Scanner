import React, { useEffect, useState } from 'react';

export default function VulnerabilityModal({ isOpen, onClose, vulnerability }) {
  const [question, setQuestion] = useState("");
  const [response, setResponse] = useState("");
  const [loading, setLoading] = useState(false);
  const [testResult, setTestResult] = useState(null);
  const [testing, setTesting] = useState(false);

  useEffect(() => {
    const handleKey = (e) => {
      if (e.key === 'Escape') onClose();
    };
    document.addEventListener('keydown', handleKey);
    return () => document.removeEventListener('keydown', handleKey);
  }, [onClose]);

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const askGemini = async () => {
    if (!question.trim()) return;
    setLoading(true);
    try {
      const prompt = `You are a security assistant. Be brief and clear.\nHere's a vulnerability: ${vulnerability.name}\n${vulnerability.description}.\n${vulnerability.recommendation}.\nUser's follow-up question: ${question}.\nRespond concisely in 2-3 lines.`;
      const res = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDax07nxeU8DkzuZQON_xDBtFfwiQkM94U", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] })
      });
      const data = await res.json();
      const answer = data.candidates?.[0]?.content?.parts?.[0]?.text || "No response from Gemini.";
      setResponse(answer);
    } catch (err) {
      setResponse("❌ Error getting response from Gemini.");
    } finally {
      setLoading(false);
    }
  };

  const simulateFixTest = async () => {
    setTesting(true);
    setTestResult(null);
    try {
      const prompt = `You're a vulnerability validator. Analyze the following issue and fix suggestion:

Issue: ${vulnerability.name}

Details: ${vulnerability.description}

Suggested Fix: ${vulnerability.recommendation}

Does the fix properly mitigate the issue? Reply in one sentence only, with ✅ Yes or ❌ No and 1-line justification.`;

      const res = await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyDax07nxeU8DkzuZQON_xDBtFfwiQkM94U", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] })
      });

      const data = await res.json();
      const resultText = data.candidates?.[0]?.content?.parts?.[0]?.text || "❌ Gemini did not return a validation result.";
      setTestResult(resultText);
    } catch (err) {
      setTestResult("❌ Validation failed. Please try again.");
    } finally {
      setTesting(false);
    }
  };

  if (!isOpen || !vulnerability) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-40 backdrop-blur-sm flex items-center justify-center z-50">
      <div
        role="dialog"
        aria-modal="true"
        className="bg-white rounded-xl max-w-xl w-full p-6 shadow-xl relative animate-fade-in"
      >
        <button
          className="absolute top-2 right-2 text-gray-500 hover:text-red-500 text-xl font-bold"
          onClick={onClose}
          aria-label="Close modal"
        >
          &times;
        </button>
        <h2 className="text-lg font-bold mb-2">🔍 {vulnerability.name}</h2>

        <p className="text-sm text-gray-700 mb-3">
          <strong>Description:</strong><br />
          {vulnerability.description || 'No description'}
        </p>

        <div className="mb-3">
          <strong className="text-sm">Recommendation:</strong>
          <div className="bg-gray-100 border border-gray-300 rounded p-3 mt-1 text-sm text-gray-700 whitespace-pre-wrap">
            {vulnerability.recommendation || 'No recommendation'}
          </div>
          <button
            className="mt-2 px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700"
            onClick={() => copyToClipboard(vulnerability.recommendation || '')}
          >
            📋 Copy Recommendation
          </button>
          <button
            className="mt-2 ml-3 px-3 py-1 bg-indigo-600 text-white text-xs rounded hover:bg-indigo-700"
            onClick={simulateFixTest}
            disabled={testing}
          >
            🧪 {testing ? "Testing..." : "Test My Fix"}
          </button>
          {testResult && <p className="text-green-700 mt-2 text-sm">{testResult}</p>}
        </div>

        <div className="text-xs text-gray-600 italic mt-2">
          🤖 Gemini Confidence: <span className="text-green-600 font-semibold">High</span>
        </div>

        <div className="mt-4 border-t pt-4">
          <label className="block text-sm font-semibold mb-1">Ask Gemini a follow-up:</label>
          <textarea
            rows="2"
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            className="w-full border border-gray-300 rounded p-2 text-sm focus:outline-none focus:ring focus:ring-blue-200"
            placeholder="e.g., What header should I add to prevent this?"
          />
          <button
            onClick={askGemini}
            disabled={loading || !question.trim()}
            className="mt-2 bg-green-600 text-white text-sm px-4 py-1 rounded hover:bg-green-700 disabled:opacity-50"
          >
            {loading ? 'Asking...' : '🔄 Ask Gemini'}
          </button>
          {response && (
            <div className="mt-3 bg-gray-50 border border-gray-300 rounded p-3 text-sm whitespace-pre-wrap">
              {response}
            </div>
          )}
        </div>

        <p className="text-xs text-gray-500 mt-4">Press ESC or click ✕ to close.</p>
      </div>
    </div>
  );
}
